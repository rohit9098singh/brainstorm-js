// can u please exaplin when do we need the arrwow fucntion over normal and vice versa

   1) You need this bound dynamically
     Normal functions get their own this depending on how they are called.
     Useful in object methods where this should refer to the object.
    const person = {
      name: "Rohit",
      greet: function () {
        console.log(this.name);
      }
    };  
    person.greet(); // Rohit

2)You want to use arguments object
function sum() {
  console.log(arguments); // [1,2,3]
}
sum(1, 2, 3);

3)Function Hoisting
console.log(foo()); // Works
function foo() { return "Hi"; }

4)Constructor Functions / Classes
function Person(name) {
  this.name = name;
}
const p = new Person("Rohit"); // Works


//===================================================
2️⃣ When to Prefer an Arrow Function (()=>)
Key Points

Lexical this
Arrow functions do not have their own this, they use this from surrounding scope.
Useful in callbacks or nested functions.
const person = {
  name: "Rohit",
  greet: function() {
    setTimeout(() => {
      console.log(this.name); // Rohit (lexical this)
    }, 100);
  }
};
person.greet();

2) shorter syntax
const nums = [1,2,3];
const squares = nums.map(n => n * n);


Stateless Component (no state, just props & UI)
// Stateless Functional Component
function Greeting(props) {
  return <h1>Hello, {props.name}!</h1>;
}

// Usage
<Greeting name="Rohit" />


Stateful Component (manages its own state)